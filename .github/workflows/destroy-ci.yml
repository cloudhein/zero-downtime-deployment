name: destroy-develop-infrastructure

on:
  #push:
  #  branches:
  #    - develop
  # Manual trigger only
  workflow_dispatch:

env:
  NODE-VERSION: 20
  AWS_REGION: ap-northeast-1

jobs:
  destroy-backend:
    name: Destroy Backend Infrastructure
    runs-on: ubuntu-latest
    # If you have other jobs this depends on, uncomment and adjust 'needs:'
    # needs: [deploy-app, containerize-backend, containerize-frontend, deploy-frontend-app, repo-meta]
    environment: destroy-develop-infrastructure
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:           ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ./deploy-backend
        run: terraform init

      - name: Terraform Plan
        working-directory: ./deploy-backend
        run: |
          terraform fmt
          terraform validate
          terraform plan \
            -var "JFROG_REGISTRY=${{ vars.JFROG_REGISTRY }}" \
            -var "JFROG_USER=${{ vars.JFROG_USERNAME }}" \
            -var "JFROG_TOKEN=${{ secrets.JFROG_TOKEN }}" \
            -var "run_number=${{ github.run_number }}" \
            -var "docker_image=${{ vars.JFROG_REGISTRY }}/expressjs-backend/express:${{ needs.repo-meta.outputs.image_name }}"

      - name: Destroy Backend Service
        working-directory: ./deploy-backend
        run: |
          terraform destroy -auto-approve \
            -var "JFROG_REGISTRY=${{ vars.JFROG_REGISTRY }}" \
            -var "JFROG_USER=${{ vars.JFROG_USERNAME }}" \
            -var "JFROG_TOKEN=${{ secrets.JFROG_TOKEN }}" \
            -var "run_number=${{ github.run_number }}" \
            -var "docker_image=${{ vars.JFROG_REGISTRY }}/expressjs-backend/express:${{ needs.repo-meta.outputs.image_name }}"

  destroy-frontend:
    name: Destroy Frontend Infrastructure
    runs-on: ubuntu-latest
    needs: [destroy-backend]  # ensure backend is torn down first, if desired
    environment: destroy-develop-infrastructure
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:           ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ./deploy-frontend
        run: terraform init

      - name: Terraform Plan
        working-directory: ./deploy-frontend
        run: |
          terraform fmt
          terraform validate
          terraform plan \
            -var "JFROG_REGISTRY=${{ vars.JFROG_REGISTRY }}" \
            -var "JFROG_USER=${{ vars.JFROG_USERNAME }}" \
            -var "JFROG_FRONTEND_TOKEN=${{ secrets.JFROG_FRONTEND_TOKEN }}" \
            -var "run_number=${{ github.run_number }}" \
            -var "docker_image=${{ vars.JFROG_REGISTRY }}/react-frontend/react:${{ needs.repo-meta.outputs.image_name }}"

      - name: Destroy Frontend Service
        working-directory: ./deploy-frontend
        run: |
          terraform destroy -auto-approve \
            -var "JFROG_REGISTRY=${{ vars.JFROG_REGISTRY }}" \
            -var "JFROG_USER=${{ vars.JFROG_USERNAME }}" \
            -var "JFROG_FRONTEND_TOKEN=${{ secrets.JFROG_FRONTEND_TOKEN }}" \
            -var "run_number=${{ github.run_number }}" \
            -var "docker_image=${{ vars.JFROG_REGISTRY }}/react-frontend/react:${{ needs.repo-meta.outputs.image_name }}"
