name: react-app-express-js-ci-cd

on:
  push:
    branches:
      #- main
      # - develop
      - feat/**
      - feature/**

  #workflow_dispatch:

env:
  NODE-VERSION: 20
  AWS_REGION: ap-northeast-1

jobs:
  repo-meta:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.container-image.outputs.IMAGE_NAME }}
      repo_name: ${{ steps.repository-name.outputs.REPO_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract repository's name
        id: repository-name
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2)
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_OUTPUT

      - name: Create image name
        id: container-image
        run: |
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/\//_/g')
          IMAGE_NAME=${BRANCH_NAME}_${{ github.sha }}
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_OUTPUT

  unit-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.3.0
        with:
          node-version: ${{ env.NODE-VERSION }}

      - name: Install dependencies
        working-directory: ./express-backend
        run: npm install

      - name: Run unit tests
        working-directory: ./express-backend
        run: npm test

      - name: Create issue on test failure
        if: failure()  # Only run if previous step failed
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          curl -X POST \
          -H "Authorization: Bearer $GH_TOKEN" \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/issues \
          -d '{
            "title": "Unit Test Failure in CI/CD Pipeline",
            "body": "Unit tests failed in GitHub Actions run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'

  format_code:
    runs-on: ubuntu-latest

    needs: unit-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.3.0
        with:
          node-version: ${{ env.NODE-VERSION }}

      - name: Install dependencies
        working-directory: ./express-backend
        run: npm install

      - name: Format code
        working-directory: ./express-backend
        run: npx prettier --write .

      - name: Push code
        working-directory: ./express-backend
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

          if [[ $(git status --porcelain) ]]; then
            if ! git add .; then
              echo "Error: Failed to stage files"
              exit 1
            fi

            if ! git commit -m "Updated from ref: ${{ github.sha }}"; then
              echo "Error: Failed to commit files"
              exit 1
            fi

            if ! git push 2>&1 | tee push.log; then
              if grep -q "403" push.log; then
                echo "Error: Permission denied (HTTP 403). Exiting."
                exit 1
              fi

              if ! git pull --rebase && git push; then
                echo "Error: failed to push the code after rebase."
                exit 1
              fi
            fi
          else
            echo "Nothing to commit."
          fi

  containerize-backend:
    runs-on: ubuntu-latest

    needs: [format_code,repo-meta]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          registry: docker.io
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # if use with uses in github action, working-directory cannot define and must use with context
      - name: Build and push Docker images
        uses: docker/build-push-action@v6.15.0
        with:
          context: ./express-backend
          file: ./express-backend/Dockerfile
          push: true
          tags: docker.io/${{ vars.DOCKERHUB_USERNAME }}/express-backend:${{ needs.repo-meta.outputs.image_name }}

  # deploy backend app
  deploy-app:
    runs-on: ubuntu-latest
    outputs:
      backend_lb_dns_name: ${{ steps.extract_lb.outputs.backend_lb_dns_name }}
 
    needs: [format_code,containerize-backend,repo-meta]
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
 
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
 
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
 
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
 
      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform fmt
          terraform validate
          terraform plan -var 'run_number=${{ github.run_number }}' -var 'docker_image=docker.io/${{ vars.DOCKERHUB_USERNAME }}/express-backend:${{ needs.repo-meta.outputs.image_name }}'
 
      - name: Run Terraform
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve -var 'run_number=${{ github.run_number }}' -var 'docker_image=docker.io/${{ vars.DOCKERHUB_USERNAME }}/express-backend:${{ needs.repo-meta.outputs.image_name }}'

      - name: Extract LB DNS output
        id: extract_lb
        working-directory: ./terraform
        run: |
          dns=$(terraform output -raw backend_lb_dns_name)
          echo "backend_lb_dns_name=${dns}" >> $GITHUB_OUTPUT
 
  containerize-frontend:
    runs-on: ubuntu-latest
    env:
      backend_ip: ${{ needs.deploy-app.outputs.backend_lb_dns_name }}

    needs: [format_code,repo-meta,deploy-app]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update .env file with backend LB DNS
        working-directory: ./react-frontend
        run: |
          sudo sed -i "s/^REACT_APP_SERVER_IP=.*$/REACT_APP_SERVER_IP=${{ env.backend_ip }}/" .env

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          registry: docker.io

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker images
        uses: docker/build-push-action@v6.15.0
        with:
          context: ./react-frontend/
          file: ./react-frontend//Dockerfile
          push: true
          tags: docker.io/${{ vars.DOCKERHUB_USERNAME }}/react-frontend:${{ needs.repo-meta.outputs.image_name }}
            
  deploy-frontend-app:
    runs-on: ubuntu-latest
 
    needs: [format_code,containerize-backend,containerize-frontend,repo-meta]
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
 
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
 
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
 
      - name: Terraform Init
        working-directory: ./terraform-frontend
        run: terraform init
 
      - name: Terraform Plan
        working-directory: ./terraform-frontend
        run: |
          terraform fmt
          terraform validate
          terraform plan -var 'run_number=${{ github.run_number }}' -var 'docker_image=docker.io/${{ vars.DOCKERHUB_USERNAME }}/react-frontend:${{ needs.repo-meta.outputs.image_name }}'
 
      - name: Run Terraform
        working-directory: ./terraform-frontend
        run: |
          terraform apply -auto-approve -var 'run_number=${{ github.run_number }}' -var 'docker_image=docker.io/${{ vars.DOCKERHUB_USERNAME }}/react-frontend:${{ needs.repo-meta.outputs.image_name }}'

  # destroy-backend:
  #   runs-on: ubuntu-latest
  #   needs: [deploy-app,containerize-backend,containerize-frontend,deploy-frontend-app,repo-meta]
  #   environment: destroy-infrastructure # Ties this job to the environment with approval
  #   if: github.event_name == 'workflow_dispatch' # Only runs on manual trigger
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4
 
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}
 
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
 
  #     - name: Terraform Init
  #       run: terraform init
  #       working-directory: ./terraform
 
  #     - name: Terraform Plan
  #       working-directory: ./terraform
  #       run: |
  #         terraform fmt
  #         terraform validate
  #         terraform plan -var "run_number=${{ github.run_number }}" -var 'docker_image=docker.io/${{ vars.DOCKERHUB_USERNAME }}/express-backend:${{ needs.repo-meta.outputs.image_name }}'
 
  #     - name: Terraform Destroy
  #       working-directory: ./terraform
  #       run: |
  #         terraform destroy -auto-approve -var "run_number=${{ github.run_number }}" -var 'docker_image=docker.io/${{ vars.DOCKERHUB_USERNAME }}/express-backend:${{ needs.repo-meta.outputs.image_name }}'
        
  # destroy-frontend:
  #   runs-on: ubuntu-latest
  #   needs: [deploy-frontend-app,containerize-frontend,repo-meta,destroy-backend]
  #   environment: destroy-infrastructure # Ties this job to the environment with approval
  #   if: github.event_name == 'workflow_dispatch' # Only runs on manual trigger
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4
 
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}
 
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
 
  #     - name: Terraform Init
  #       run: terraform init
  #       working-directory: ./terraform-frontend
 
  #     - name: Terraform Plan
  #       working-directory: ./terraform-frontend
  #       run: |
  #         terraform fmt
  #         terraform validate
  #         terraform plan -var "run_number=${{ github.run_number }}" -var 'docker_image=docker.io/${{ vars.DOCKERHUB_USERNAME }}/react-frontend:${{ needs.repo-meta.outputs.image_name }}'
 
  #     - name: Terraform Destroy
  #       working-directory: ./terraform-frontend
  #       run: |
  #         terraform destroy -auto-approve -var "run_number=${{ github.run_number }}" -var 'docker_image=docker.io/${{ vars.DOCKERHUB_USERNAME }}/react-frontend:${{ needs.repo-meta.outputs.image_name }}'
        
